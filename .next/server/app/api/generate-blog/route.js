"use strict";(()=>{var e={};e.id=300,e.ids=[300],e.modules={2934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},4580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},5869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8893:e=>{e.exports=require("buffer")},4770:e=>{e.exports=require("crypto")},5816:e=>{e.exports=require("process")},6162:e=>{e.exports=require("worker_threads")},2254:e=>{e.exports=require("node:buffer")},6005:e=>{e.exports=require("node:crypto")},7561:e=>{e.exports=require("node:fs")},8849:e=>{e.exports=require("node:http")},2286:e=>{e.exports=require("node:https")},7503:e=>{e.exports=require("node:net")},9411:e=>{e.exports=require("node:path")},7742:e=>{e.exports=require("node:process")},4492:e=>{e.exports=require("node:stream")},2477:e=>{e.exports=require("node:stream/web")},1041:e=>{e.exports=require("node:url")},7261:e=>{e.exports=require("node:util")},5628:e=>{e.exports=require("node:zlib")},3630:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>h,patchFetch:()=>m,requestAsyncStorage:()=>d,routeModule:()=>c,serverHooks:()=>x,staticGenerationAsyncStorage:()=>g});var o={};r.r(o),r.d(o,{POST:()=>l});var n=r(9303),s=r(8716),i=r(670),a=r(1258),p=r(6471),u=r(7070);async function l(e){try{let t;let{userId:r}=(0,p.I8)();if(!r)return u.NextResponse.json({error:"Unauthorized"},{status:401});let{prompt:o,language:n="English"}=await e.json();if(!o)return u.NextResponse.json({error:"Prompt is required"},{status:400});let s=new a.$D(process.env.GOOGLE_GEMINI_API_KEY).getGenerativeModel({model:"gemini-1.5-flash"}),i=`
      Generate a professional blog post in ${n} based on the following topic: "${o}".

      The blog should include:
      1. An engaging title in ${n}
      2. An introduction that hooks the reader
      3. 3-5 main sections with subheadings
      4. Relevant facts and information
      5. A conclusion

      Format the response as a JSON object with the following structure:
      {
        "title": "The blog title in ${n}",
        "content": "The full blog content with markdown formatting in ${n}"
      }
    `,l=await s.generateContent(i),c=(await l.response).text(),d=c.match(/```json\n([\s\S]*?)\n```/)||c.match(/```\n([\s\S]*?)\n```/)||c.match(/{[\s\S]*?}/);if(d)try{t=JSON.parse(d[1]||d[0])}catch(o){let e=c.match(/"title":\s*"([^"]+)"/),r=c.match(/"content":\s*"([^"]+)"/);t=e&&r?{title:e[1],content:r[1].replace(/\\n/g,"\n").replace(/\\"/g,'"')}:{title:"Generated Blog",content:c}}else t={title:"Generated Blog",content:c};return u.NextResponse.json({blog:t})}catch(e){return console.error("Error generating blog:",e),u.NextResponse.json({error:"Failed to generate blog"},{status:500})}}let c=new n.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/generate-blog/route",pathname:"/api/generate-blog",filename:"route",bundlePath:"app/api/generate-blog/route"},resolvedPagePath:"E:\\GEN AI\\AIBlogDev\\app\\api\\generate-blog\\route.js",nextConfigOutput:"",userland:o}),{requestAsyncStorage:d,staticGenerationAsyncStorage:g,serverHooks:x}=c,h="/api/generate-blog/route";function m(){return(0,i.patchFetch)({serverHooks:x,staticGenerationAsyncStorage:g})}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[312,586],()=>r(3630));module.exports=o})();